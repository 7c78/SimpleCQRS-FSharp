{"name":"Simplecqrs-fsharp","tagline":"Simple CQRS implemented with F# ","body":"Simple CQRS on F# (F-Sharp) 3.0\r\n\r\nBased on Greg Young's CQRS: https://github.com/gregoryyoung/m-r/tree/master/SimpleCQRS\r\n\r\nCQRS is Command and Query Responsibility Segregation -pattern.\r\nIf you don't know that, use Google or look http://martinfowler.com/bliki/CQRS.html\r\nI have separated command side and query side as different projects.\r\n\r\nThis is F# solution. Compared to C#:\r\n  + Simpler source code\r\n  + No need for any \"InfrastructureCrap\"\r\n  + Domain objects doesn't need to have parameter less constructors\r\n  + Interactive-driven development\r\n  \r\nWhat you will need to run this:\r\n  + Visual Studio 11 (Beta): http://www.microsoft.com/visualstudio/11/en-us\r\n\r\nOptional:\r\n  + Reactive extensions: http://msdn.microsoft.com/en-us/data/gg577609\r\n\r\nThere are two versions of event storage:\r\n1) Pure F# as EventStorage.fs\r\n   - Uses pure .NET Events with F# Observable as event bus\r\n   - Uses MailboxProcessor (\"agents\"/message passing) as event storage\r\n2) F# with Reactive Extensions as EventStorageRx.fs\r\n   - Uses reactive framework Subject<T> as event bus\r\n   - Uses reactive framework ReplaySubject<T> as event storage\r\nAlthough technical concept is different, the functionality is identical.\r\n\r\nYou can run this with F# interactive, directly from files and/or using Script.fsx.\r\n\r\nThis QuerySide is just in-memory one as in Greg's example. \r\nI suggest using F# Type Providers in QuerySide with real database...\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}